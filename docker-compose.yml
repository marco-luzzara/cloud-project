services:
  localstack:
    container_name: "${LOCALSTACK_CONTAINER_NAME-localstackmain}"
    image: localstack/localstack-pro:3.0.2
    ports:
      - "127.0.0.1:${LOCALSTACK_PORT:-4566}:4566"            # LocalStack Gateway
      - "127.0.0.1:4510-4559:4510-4559"  # external services port range
      - "127.0.0.1:53:53"                # DNS config (required for Pro)
      - "127.0.0.1:53:53/udp"            # DNS config (required for Pro)
      - "127.0.0.1:443:443"              # LocalStack HTTPS Gateway (required for Pro)
    environment:
      - DEBUG=${DEBUG-}
      - PERSISTENCE=${LOCALSTACK_PERSISTENCE:-1}
      - LOCALSTACK_AUTH_TOKEN=${LOCALSTACK_AUTH_TOKEN:?Create the env variable LOCALSTACK_AUTH_TOKEN and fill it with the auth token}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - SERVICES=lambda,s3,apigateway,logs,rds,cognito-idp,sns,secretsmanager,iam,ec2,ses,cloudwatch
      - LAMBDA_DOCKER_NETWORK=${LOCALSTACK_NETWORK_NAME-localstack_network}
      - ENFORCE_IAM=1
#      - IAM_SOFT_MODE=1
      - DEBUG=1
    volumes:
      - "./volumes/${LOCALSTACK_VOLUME_DIR:-localstack_persistence}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - localstack_network

  terraform:
    container_name: "${TERRAFORM_CONTAINER_NAME-terraform_for_localstack}"
    image: hashicorp/terraform:1.5.7
    working_dir: /app
    entrypoint: sh -c "sleep inf"
    volumes:
      - "./volumes/${TERRAFORM_VOLUME_DIR:-terraform}:/app"
    networks:
      - localstack_network

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector:0.88.0
    volumes:
      - "./observability/otel-collector/collector.yml:/etc/otelcol/config.yaml"
#    ports:
#      - "8888:8888"   # Prometheus metrics exposed by the collector
#      - "8889:8889"   # Prometheus exporter metrics
#      - "13133:13133" # health_check extension
#      - "4317:4317"   # OTLP gRPC receiver
    networks:
      - localstack_network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.2
    volumes:
      - "./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    healthcheck:
      test: [ "CMD", "wget", "http://localhost:9090" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - "9090:9090"
    networks:
      - localstack_network

  jaeger-all-in-one:
    container_name: jaeger
    image: jaegertracing/all-in-one:1.51.0
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    networks:
      - localstack_network

  grafana:
    image: grafana/grafana:10.2.0
    container_name: grafana
    user: "0"
    environment:
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    volumes:
      - "./volumes/grafana:/var/lib/grafana"
      - "./observability/grafana/provisioning:/etc/grafana/provisioning"
    ports:
      - '3000:3000'
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - localstack_network

networks:
  localstack_network:
    name: "${LOCALSTACK_NETWORK_NAME-localstack_network}"