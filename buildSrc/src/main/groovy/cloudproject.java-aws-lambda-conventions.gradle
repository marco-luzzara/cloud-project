plugins {
    id 'java-library'
    id 'cloudproject.java-common-conventions'
}

dependencies {
	// aws
	implementation 'com.amazonaws:aws-lambda-java-core'
	implementation 'com.amazonaws:aws-lambda-java-events'
	runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2'

	// monitoring
	implementation("io.opentelemetry:opentelemetry-api")
	implementation("io.opentelemetry:opentelemetry-sdk")
	implementation("io.opentelemetry:opentelemetry-sdk-metrics")
	implementation("io.opentelemetry:opentelemetry-exporter-logging")
	implementation("io.opentelemetry:opentelemetry-exporter-otlp")
	implementation("io.opentelemetry:opentelemetry-semconv:1.22.0-alpha")
//	implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure")
//	implementation("io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi")
	implementation 'software.amazon.opentelemetry:aws-opentelemetry-agent'

	// logging
	implementation "org.apache.logging.log4j:log4j-api"
	implementation "org.apache.logging.log4j:log4j-core"
	runtimeOnly ('org.apache.logging.log4j:log4j-slf4j-impl') {
		exclude group: 'org.slf4j', module: 'log4j-to-slf4j'
	}

	// spring
	implementation "org.springframework.boot:spring-boot-starter"
	implementation "org.springframework.cloud:spring-cloud-function-adapter-aws"
	implementation "org.springframework.cloud:spring-cloud-function-web"
	testImplementation "org.springframework.boot:spring-boot-starter-test"

	// junit and assertions
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.assertj:assertj-core"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

	// testcontainer
	testImplementation 'org.testcontainers:localstack'
	testImplementation "org.testcontainers:junit-jupiter"
}

var DIST_FOLDER = "${project.buildDir}/dist"

task buildZip(type: Zip) {
	group "build"
	into('lib') {
		from(jar)
		from "${rootProject.rootDir}/cloud/infrastructure/src/testFixtures/resources/localstack/AwsSdkV2DisableCertificateValidation-1.0.jar"
		from(configurations.runtimeClasspath)
	}
	from("${rootProject.rootDir}/cloud/infrastructure/src/main/resources/opentelemetry/collector.yml").into(".")
	archiveFileName = "${project.name}.zip"
	destinationDirectory = file(DIST_FOLDER)
}

task buildHotReloadFolder(type: Copy) {
	group "build"
	from zipTree("$DIST_FOLDER/${project.name}.zip")
	into "${project.buildDir}/hot-reload"

	dependsOn buildZip
}

classes {
	finalizedBy buildZip
}

// ************************************************
// For ShadowJar
// ************************************************
//import com.github.jengelman.gradle.plugins.shadow.transformers.*
//
//shadowJar {
////	destinationfile('dist')
//	dependencies {
//		exclude(
//				dependency("org.springframework.cloud:spring-cloud-function-web:4.0.5"))
//	}
//	// Required for Spring
//	mergeServiceFiles()
//	append 'META-INF/spring.handlers'
//	append 'META-INF/spring.schemas'
//	append 'META-INF/spring.tooling'
//	append 'META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports'
//	append 'META-INF/spring/org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration.imports'
//	transform(PropertiesFileTransformer) {
//		paths = ['META-INF/spring.factories']
//		mergeStrategy = "append"
//	}
//}
// ************************************************